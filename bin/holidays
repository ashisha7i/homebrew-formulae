#!/bin/zsh

FOOTER="Last Updated on 09-NOV-2023 (As per the email from 'TDD Senior Leadership' dated 09-NOV-2023)"



# Define variables for ANSI Colors
ANSI_NONE='\033[0m'
ANSI_BLACK='\033[0;30m'
ANSI_BLACK_1='\033[1;30m'
ANSI_RED='\033[0;31m'
ANSI_GREEN='\033[0;32m'
ANSI_ORANGE='\033[0;33m'
ANSI_BLUE='\033[0;34m'
ANSI_YELLOW='\033[1;33m'
ANSI_WHITE='\033[1;37m'
ANSI_CYAN='\033[1;36m'
NC='\033[0m'


# Declaring an array (non-associative) to maintain the order of dates
declare -a holidayOrder2023
declare -a holidayOrder2024

# Declaring an associative array to hold the holidays
declare -A holidays2023
declare -A holidays2024
holidays2023[2023-01-02]="02-JAN-2023 (Monday)     : New Year's Day (Observed)"; holidayOrder2023+=( 2023-01-02 );
holidays2023[2023-01-16]="16-JAN-2023 (Monday)     : Martin Luther King Day"; holidayOrder2023+=( 2023-01-16 );
holidays2023[2023-02-20]="20-FEB-2023 (Monday)     : Presidents Day"; holidayOrder2023+=( 2023-02-20 );
holidays2023[2023-05-29]="29-MAY-2023 (Monday)     : Memorial Day"; holidayOrder2023+=( 2023-05-29 );
holidays2023[2023-06-04]="04-JUL-2023 (Tuesday)    : Independence Day"; holidayOrder2023+=( 2023-06-04 );
holidays2023[2023-09-04]="04-SEP-2023 (Monday)     : Labor Day"; holidayOrder2023+=( 2023-09-04 );
holidays2023[2023-11-23]="23-NOV-2023 (Thursday)   : Thanksgiving"; holidayOrder2023+=( 2023-11-23 );
holidays2023[2023-11-24]="24-NOV-2023 (Friday)     : Family Day"; holidayOrder2023+=( 2023-11-24 );
holidays2023[2023-12-25]="25-DEC-2023 (Monday)     : Christmas"; holidayOrder2023+=( 2023-12-25 );
holidays2023[2024-01-01]="01-JAN-2024 (Monday)     : New Year's Day 2024"; holidayOrder2023+=( 2024-01-01 );


holidays2024[2024-01-01]="01-JAN-2024 (Monday)     : New Year's Day"; holidayOrder2024+=( 2024-01-01 );
holidays2024[2024-01-15]="15-JAN-2024 (Monday)     : Martin Luther King Day"; holidayOrder2024+=( 2024-01-15 );
holidays2024[2024-02-19]="19-FEB-2024 (Monday)     : Presidents Day"; holidayOrder2024+=( 2024-02-19 );
holidays2024[2024-05-27]="27-MAY-2024 (Monday)     : Memorial Day"; holidayOrder2024+=( 2024-05-27 );
holidays2024[2024-06-19]="19-JUN-2024 (Wednesday)  : Juneteenth"; holidayOrder2024+=( 2024-06-19 );
holidays2024[2024-07-04]="04-JUL-2024 (Thursday)   : Independence Day"; holidayOrder2024+=( 2024-07-04 );
holidays2024[2024-09-02]="02-SEP-2024 (Monday)     : Labor Day"; holidayOrder2024+=( 2024-09-02 );
holidays2024[2024-11-11]="11-NOV-2024 (Monday)     : Veterans Day"; holidayOrder2024+=( 2024-11-11 );
holidays2024[2024-11-28]="28-NOV-2024 (Thursday)   : Thanksgiving"; holidayOrder2024+=( 2024-11-28 );
holidays2024[2024-11-29]="29-NOV-2024 (Friday)     : Family Day"; holidayOrder2024+=( 2024-11-29 );
holidays2024[2024-12-25]="25-DEC-2024 (Wednesday)  : Christmas"; holidayOrder2024+=( 2024-12-25 );
holidays2024[2025-01-01]="01-JAN-2025 (Wednesday)  : New Year's Day 2024"; holidayOrder2024+=( 2025-01-01 );



function showAllHolidays {
    echo " "
    for i in "${holidayOrder2023[@]}"
    do
        keyDate=`strptime -i "%Y-%m-%d" $i`
        if datetest today --gt $keyDate; then
            if [[ "$1" == "ALL" ]]; then
                echo -e "   ${ANSI_BLACK_1}${holidays2023[$i]}${NC}"
            fi
        else
            echo "   ${holidays2023[$i]}"
        fi
    done
    echo " "
    
    for i in "${holidayOrder2024[@]}"
    do
        keyDate=`strptime -i "%Y-%m-%d" $i`
        if datetest today --gt $keyDate; then
            if [[ "$1" == "ALL" ]]; then
                echo -e "   ${ANSI_BLACK_1}${holidays2024[$i]}${NC} $1"
            fi
        else
            echo "   ${holidays2024[$i]}"
        fi
    done
    echo " "
    echo "   ** $FOOTER"
}


## -- START : Enhancements for future release 
# Converting the passed parameter to upper case
#selection=${(U)1}


# Helper Functions
#function showUsage {
#    echo "
#    Usage:
#        
#        holidays <opt>
#        
#        all  - List ALL Holidays (default)
#        next - List NEXT Holiday
#    "
#    exit
#}
#
# Check input and print messages
#if [[ "$#" -eq 0 ]]; then
#    selection=ALL
#elif [ "$#" -gt 1 ]; then
#    showUsage
#elif [[ "$selection" != "ALL" && "$selection" != "NEXT" ]]; then
#    showUsage
#else
#    selection="${(U)selection}"
#fi
#
# Processing
#if [[ "$selection" = "ALL" ]]; then
#    showAllHolidays
#else
#    echo "WIP"
#fi
## -- END : Enhancements for future release 

showAllHolidays $1
